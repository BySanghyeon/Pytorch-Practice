{"cells":[{"cell_type":"markdown","metadata":{"id":"P6EDkmEl-E3M"},"source":["# Character Level RNN\n","\n","> 들여쓴 블록"]},{"cell_type":"markdown","metadata":{"id":"FFMhD1dG-E3V"},"source":["이번 포스트에선 단어를 분류하기 위해 기초적인 문자-단위 RNN을 구축하고 학습할 것이다.\n","문자-단위 RNN은 단어를 문자의 연속으로 읽어 각 단계의 예측과 hidden state를 출력하고 다음 단계에 은닉 상태를 전달한다. \n","단어가 속한 클래스로 출력이 되도록 최종 예측을 선택한다. \n","\n","이번 포스트의 목적은 18 개의 언어로 된 수천개의 성(surname)을 훈련 시키고 철자에 따라 어떤언어인지 예측 하는것이다.\n"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lexHDwFm-kzg","executionInfo":{"status":"ok","timestamp":1645597868123,"user_tz":-540,"elapsed":29575,"user":{"displayName":"Cho Sanghyeon","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03618492692203589805"}},"outputId":"5d5ae78f-56d5-4ffe-dbfb-5b66f55340a9"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["pwd"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"Xnm4CbI9_bF0","executionInfo":{"status":"ok","timestamp":1645597868124,"user_tz":-540,"elapsed":13,"user":{"displayName":"Cho Sanghyeon","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03618492692203589805"}},"outputId":"153a9a79-642b-4dc4-a395-f4789e6520e5"},"execution_count":2,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'/content'"]},"metadata":{},"execution_count":2}]},{"cell_type":"markdown","metadata":{"id":"whdLQNMK-E3X"},"source":["## 데이터 준비\n"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2yZkvVCv-E3Z","executionInfo":{"status":"ok","timestamp":1645597872457,"user_tz":-540,"elapsed":4342,"user":{"displayName":"Cho Sanghyeon","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03618492692203589805"}},"outputId":"752763a3-ac48-4eab-e4ee-8740f69f12d8"},"outputs":[{"output_type":"stream","name":"stdout","text":["['drive/MyDrive/Colab Notebooks/names/Polish.txt', 'drive/MyDrive/Colab Notebooks/names/Russian.txt', 'drive/MyDrive/Colab Notebooks/names/Dutch.txt', 'drive/MyDrive/Colab Notebooks/names/Czech.txt', 'drive/MyDrive/Colab Notebooks/names/Spanish.txt', 'drive/MyDrive/Colab Notebooks/names/Scottish.txt', 'drive/MyDrive/Colab Notebooks/names/Greek.txt', 'drive/MyDrive/Colab Notebooks/names/Arabic.txt', 'drive/MyDrive/Colab Notebooks/names/Portuguese.txt', 'drive/MyDrive/Colab Notebooks/names/French.txt', 'drive/MyDrive/Colab Notebooks/names/Italian.txt', 'drive/MyDrive/Colab Notebooks/names/Irish.txt', 'drive/MyDrive/Colab Notebooks/names/German.txt', 'drive/MyDrive/Colab Notebooks/names/Japanese.txt', 'drive/MyDrive/Colab Notebooks/names/Korean.txt', 'drive/MyDrive/Colab Notebooks/names/English.txt', 'drive/MyDrive/Colab Notebooks/names/Chinese.txt', 'drive/MyDrive/Colab Notebooks/names/Vietnamese.txt']\n","Slusarski\n"]}],"source":["from __future__ import unicode_literals, print_function, division\n","from io import open\n","import glob\n","import os\n","\n","def findFiles(path): return glob.glob(path)\n","\n","print(findFiles('drive/MyDrive/Colab Notebooks/names/*.txt'))\n","\n","import unicodedata\n","import string\n","\n","all_letters = string.ascii_letters + \" .,;''\"\n","n_letters = len(all_letters)\n","\n","# 유니코드 문자열을 ASCII로 변환 , https://stackoverflow.com/a/518232/2809427 참고\n","def unicodeToAscii(s):\n","    return ''.join(\n","        c for c in unicodedata.normalize('NFD', s)\n","        if unicodedata.category(c) != 'Mn'\n","        and c in all_letters\n","    )\n","\n","print(unicodeToAscii('Ślusàrski'))\n","\n","# 각 언어의 이름 목록인 category_lines 사전생성\n","category_lines = {}\n","all_categories = []\n","\n","# 파일을 읽거 줄 단위로 분리\n","def readLines(filename):\n","    lines = open(filename, encoding='utf-8').read().strip().split('\\n')\n","    return [unicodeToAscii(line) for line in lines]\n","\n","for filename in findFiles('drive/MyDrive/Colab Notebooks/names/*.txt'):\n","    category = os.path.splitext(os.path.basename(filename))[0]\n","    all_categories.append(category)\n","    lines = readLines(filename)\n","    category_lines[category] = lines\n","\n","n_categories = len(all_categories)"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Oi3b-s4S-E3g","executionInfo":{"status":"ok","timestamp":1645597872458,"user_tz":-540,"elapsed":24,"user":{"displayName":"Cho Sanghyeon","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03618492692203589805"}},"outputId":"9d43569f-f2d8-4589-dad2-b8eaa39b7fc8"},"outputs":[{"output_type":"stream","name":"stdout","text":["['Abandonato', 'Abatangelo', 'Abatantuono', 'Abate', 'Abategiovanni']\n"]}],"source":["print(category_lines['Italian'][:5])"]},{"cell_type":"markdown","metadata":{"id":"XFa3qI0j-E3i"},"source":["## 이름을 Tensor로 변경 "]},{"cell_type":"markdown","metadata":{"id":"LDF5aDVx-E3k"},"source":["하나의 문자를 표현하기 위해 크기가 <1 x n_letters>인 one-hot vector를 사용한다. \n","단어를 만들기 위해 벡터들을 <line_length x 1 x n_letters>에 결합한다. 여기서 1은 배치가 있다고 가정하기 때문이다."]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-s2zJ6nF-E3n","executionInfo":{"status":"ok","timestamp":1645597878202,"user_tz":-540,"elapsed":5764,"user":{"displayName":"Cho Sanghyeon","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03618492692203589805"}},"outputId":"7566b8f5-fc83-4dc1-95c6-4472237b1941"},"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n","         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,\n","         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n","         0., 0., 0., 0.]])\n","torch.Size([5, 1, 58])\n"]}],"source":["import torch \n","\n","# all_letters로 문자의 주소 찾기, 예시 \"a\" = 0\n","def letterToIndex(letter):\n","    return all_letters.find(letter)\n","\n","# 검증을 위행 한개의 문자를 <1 x n_letters> 로 변환 \n","def letterToTensor(letter):\n","    tensor = torch.zeros(1, n_letters)\n","    tensor[0][letterToIndex(letter)] = 1\n","    return tensor\n","\n","# 한줄을 <line_length x 1 x n_letters> 또는 One_Hot 문자 벡터의 Array로 변경 \n","def lineToTensor(line):\n","    tensor = torch.zeros(len(line), 1, n_letters)\n","    for li, letter in enumerate (line):\n","        tensor[li][0][letterToIndex(letter)] = 1\n","    return tensor\n","\n","print(letterToTensor('J'))\n","print(lineToTensor('Jones').size())"]},{"cell_type":"markdown","metadata":{"id":"4kvLo0IM-E3p"},"source":["## 네트워크 생성\n","\n","Autograd 전에, Torch에서 RNN생성은 여러 시간 단계에 걸쳐서 계층의 매개변수를 복제하는 작업을 포함한다. \n","계층은 hidden state와 gradient를 가지며, 이것들은 그래프 자체에서 완전히 처리된다. \n","이는 feed-forward 계층과 같은 매우 순수한 방법으로 RNN구현할 수 있다는것을 의미한다. \n","\n","![image.png](attachment:90ab0c4b-89a2-4402-870e-961e7a97964f.png)"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"2v2eZMna-E3r","executionInfo":{"status":"ok","timestamp":1645597878203,"user_tz":-540,"elapsed":38,"user":{"displayName":"Cho Sanghyeon","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03618492692203589805"}}},"outputs":[],"source":["import torch.nn as nn\n","\n","class RNN(nn.Module):\n","    def __init__(self, input_size, hidden_size, output_size):\n","        super(RNN, self).__init__()\n","        \n","        self.hidden_size = hidden_size\n","        \n","        self.i2h = nn.Linear(input_size + hidden_size, hidden_size)\n","        self.i2o = nn.Linear(input_size + hidden_size, output_size)\n","        self.softmax = nn.LogSoftmax(dim=1)\n","        \n","    def forward(self, input, hidden):\n","        combined = torch.cat((input, hidden), 1)\n","        hidden = self.i2h(combined)\n","        output = self.i2o(combined)\n","        output = self.softmax(output)\n","        return output, hidden\n","\n","    def initHidden(self):\n","        return torch.zeros(1, self.hidden_size)\n","\n","n_hidden = 128\n","rnn = RNN(n_letters, n_hidden, n_categories)\n","        "]},{"cell_type":"markdown","metadata":{"id":"wfZDfEuU-E3u"},"source":["이 네트워크의 한단계를 실행하려면 입력인 현재문자 tensor와 이전의 hidden state를 전달해야 한다. 출력값인 각 언어의 확률과 다음 hidden state를 반환 받는다. "]},{"cell_type":"code","execution_count":7,"metadata":{"id":"A3I_vw3E-E3v","executionInfo":{"status":"ok","timestamp":1645597878204,"user_tz":-540,"elapsed":37,"user":{"displayName":"Cho Sanghyeon","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03618492692203589805"}}},"outputs":[],"source":["input = letterToTensor('A')\n","hidden = torch.zeros(1, n_hidden)\n","\n","output, next_hidden = rnn(input, hidden)"]},{"cell_type":"markdown","metadata":{"id":"JOnqDktd-E3x"},"source":["매 단계마다 새로운 tensor를 만드는것은 효율성을 저해한다. 그래서 letterToTensor 대신 lineToTensor를 잘라서 사용할 것이다. 이는 Tensor의 pre-computing 배치에 의해 더욱 최적화 할수 있다."]},{"cell_type":"code","execution_count":8,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SUJOxNIq-E3y","executionInfo":{"status":"ok","timestamp":1645597878204,"user_tz":-540,"elapsed":36,"user":{"displayName":"Cho Sanghyeon","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03618492692203589805"}},"outputId":"1b43a29d-0776-4c8e-eee1-9a6f28cc9c33"},"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[-2.7902, -2.8721, -2.9658, -2.9280, -2.9359, -2.8586, -2.8691, -2.9751,\n","         -2.8902, -2.9007, -2.9404, -2.9626, -2.9080, -2.7766, -2.8545, -2.8555,\n","         -2.8634, -2.9064]], grad_fn=<LogSoftmaxBackward0>)\n"]}],"source":["input = lineToTensor('Albert')\n","hidden = torch.zeros(1, n_hidden)\n","\n","output, next_hidden = rnn(input[0], hidden)\n","print(output)\n"]},{"cell_type":"markdown","metadata":{"id":"rkfdwa8n-E3z"},"source":["출력은 <1x n_categories> tensor이고, 모든 항목은 해당 카테고리의 likelihood이다."]},{"cell_type":"markdown","metadata":{"id":"2IvVH-X4-E30"},"source":["## 학습 "]},{"cell_type":"markdown","metadata":{"id":"P21isF1O-E31"},"source":["### 학습 준비\n","\n","네트워크 출력으로 가장 높은 카테고리 이름과 카테고리 변호 반환"]},{"cell_type":"code","execution_count":9,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9GCVAlBa-E31","executionInfo":{"status":"ok","timestamp":1645597878205,"user_tz":-540,"elapsed":33,"user":{"displayName":"Cho Sanghyeon","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03618492692203589805"}},"outputId":"35f026d5-1f9b-4e71-c280-9c1db52201f8"},"outputs":[{"output_type":"stream","name":"stdout","text":["('Japanese', 13)\n"]}],"source":["def categoryFromOutput(output):\n","    top_n, top_i = output.topk(1) # 텐서의 가장 큰 값 및 주소\n","    category_i = top_i[0].item() # 텐서에서 정수 값으로 변경\n","    return all_categories[category_i], category_i\n","\n","print(categoryFromOutput(output))"]},{"cell_type":"code","execution_count":10,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6Hpzil-B-E32","executionInfo":{"status":"ok","timestamp":1645597878206,"user_tz":-540,"elapsed":30,"user":{"displayName":"Cho Sanghyeon","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03618492692203589805"}},"outputId":"11f146d8-3b7a-4848-f65f-700867165508"},"outputs":[{"output_type":"stream","name":"stdout","text":["category = Arabic / line = Naifeh\n","category = Italian / line = Spano\n","category = Vietnamese / line = Mai\n","category = Dutch / line = Oomen\n","category = Czech / line = Coma\n","category = Polish / line = Pasternack\n","category = Scottish / line = Crawford\n","category = French / line = Paternoster\n","category = Scottish / line = Henderson\n","category = Russian / line = Viranovsky\n"]}],"source":["import random\n","\n","def randomChoice(l):\n","    return l[random.randint(0, len(l) - 1)]\n","\n","def randomTrainingExample():\n","    category = randomChoice(all_categories)\n","    line = randomChoice(category_lines[category])\n","    category_tensor = torch.tensor([all_categories.index(category)], dtype=torch.long)\n","    line_tensor = lineToTensor(line)\n","    return category, line, category_tensor, line_tensor\n","\n","for i in range(10):\n","    category, line, category_tensor, line_tensor = randomTrainingExample()\n","    print('category =', category, '/ line =', line)"]},{"cell_type":"markdown","metadata":{"id":"98NQ_yph-E33"},"source":["### 네트워크 학습\n","\n","이 네트워크를 학습하는데 필요한 학습데이터를 보여주고 추정한다. 만일 추정이 틀릴시 알려준다.\n","RNN의 마지막 계층이 nn.LogSoftmax이므로 손실 함수로 nn.NLLLoss각 적합하다."]},{"cell_type":"code","execution_count":11,"metadata":{"id":"kPxANM3W-E34","executionInfo":{"status":"ok","timestamp":1645597878206,"user_tz":-540,"elapsed":26,"user":{"displayName":"Cho Sanghyeon","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03618492692203589805"}}},"outputs":[],"source":["criterion = nn.NLLLoss()"]},{"cell_type":"markdown","metadata":{"id":"72gB3s3n-E34"},"source":["각 학습의 루프는 다음과 같다.\n","\n","- 입력과 목표 tensor 생성\n","- 0으로 초기화된 은닉 상태 생성\n","- 각 문자를 읽기 -> 다음 문자를 위한 은닉상태 유지\n","- 목표와 최종 출력 비교\n","- 역전파 \n","- 출력과 손실 반환"]},{"cell_type":"code","execution_count":12,"metadata":{"id":"Tb89S4YQ-E35","executionInfo":{"status":"ok","timestamp":1645597878207,"user_tz":-540,"elapsed":27,"user":{"displayName":"Cho Sanghyeon","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03618492692203589805"}}},"outputs":[],"source":["learning_rate = 0.005\n","\n","def train(category_tensor, line_tensor):\n","    hidden = rnn.initHidden()\n","    \n","    rnn.zero_grad()\n","    \n","    for i in range(line_tensor.size()[0]):\n","        output, hidden = rnn(line_tensor[i], hidden)\n","        \n","    loss = criterion(output, category_tensor)\n","    loss.backward()\n","    \n","    for p in rnn.parameters():\n","        p.data.add_(p.grad.data, alpha= -learning_rate)\n","        \n","    return output, loss.item()"]},{"cell_type":"markdown","metadata":{"id":"BPrMFxR_-E36"},"source":["train 함수가 출력과 손실을 반환하기 때문에 추정값을 화면에 출력하고 도식화를 위한 손실을 추척할 수 있다."]},{"cell_type":"code","execution_count":13,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WWa2hAv2-E36","executionInfo":{"status":"ok","timestamp":1645598005085,"user_tz":-540,"elapsed":126528,"user":{"displayName":"Cho Sanghyeon","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03618492692203589805"}},"outputId":"f94d6dee-d82a-41ed-e049-798ba7599cb8"},"outputs":[{"output_type":"stream","name":"stdout","text":["5000 5% (0m 6s) 2.8966 Nader / German ✗ (Arabic)\n","10000 10% (0m 13s) 3.0760 Taidhg / Arabic ✗ (Irish)\n","15000 15% (0m 20s) 1.7664 Lebedevich / Russian ✓\n","20000 20% (0m 26s) 1.7205 Zeni / Chinese ✗ (Italian)\n","25000 25% (0m 32s) 0.9131 Dritsas / Greek ✓\n","30000 30% (0m 38s) 0.4231 Thach / Vietnamese ✓\n","35000 35% (0m 45s) 1.2740 Halabi / Arabic ✓\n","40000 40% (0m 51s) 0.7555 Czajka / Polish ✓\n","45000 45% (0m 57s) 0.6949 Dao / Vietnamese ✓\n","50000 50% (1m 3s) 1.4986 Prinz / German ✓\n","55000 55% (1m 10s) 0.4691 Sitko / Polish ✓\n","60000 60% (1m 16s) 0.6570 Hew / Chinese ✓\n","65000 65% (1m 23s) 2.8631 Kreisinger / German ✗ (Czech)\n","70000 70% (1m 29s) 1.9737 Favero / Portuguese ✗ (Italian)\n","75000 75% (1m 35s) 0.4215 Watson / Scottish ✓\n","80000 80% (1m 41s) 0.6944 Qin / Chinese ✓\n","85000 85% (1m 48s) 1.4332 Yin / Korean ✗ (Chinese)\n","90000 90% (1m 54s) 0.0195 Yoshizawa / Japanese ✓\n","95000 95% (2m 0s) 2.4986 Peij / Chinese ✗ (Dutch)\n","100000 100% (2m 6s) 1.9353 Jordan / English ✗ (Polish)\n"]}],"source":["import time \n","import math\n","\n","n_iters = 100000\n","print_every = 5000\n","plot_every = 1000\n","\n","# 도식화를 위한 손실 추적\n","current_loss = 0\n","all_losses = []\n","\n","def timeSince(since):\n","    now = time.time()\n","    s = now - since\n","    m = math.floor(s/60)\n","    s -= m * 60\n","    return '%dm %ds' % (m, s)\n","\n","start = time.time()\n","\n","for iter in range(1, n_iters + 1):\n","    category, line, category_tensor, line_tensor = randomTrainingExample()\n","    output, loss = train(category_tensor, line_tensor)\n","    current_loss += loss\n","    \n","    # iter 숫자, 손실, 이름, 추측화면 출력\n","    if iter % print_every ==0:\n","        guess, guess_i = categoryFromOutput(output)\n","        correct = '✓' if guess == category else '✗ (%s)' % category\n","        print('%d %d%% (%s) %.4f %s / %s %s' % (iter, iter / n_iters * 100, timeSince(start), \n","                                                loss,line, guess, correct))\n","        \n","        if iter % plot_every == 0:\n","            all_losses.append(current_loss / plot_every)\n","            current_loss = 0\n","\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"914U55yH-E37"},"source":["## 결과 도식화"]},{"cell_type":"code","execution_count":14,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":283},"id":"s2jM6eIJ-E38","executionInfo":{"status":"ok","timestamp":1645598005086,"user_tz":-540,"elapsed":32,"user":{"displayName":"Cho Sanghyeon","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03618492692203589805"}},"outputId":"5dfda22f-05fc-4ac0-d705-ef96aa7d15a6"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7ffa9f51b790>]"]},"metadata":{},"execution_count":14},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}],"source":["import matplotlib.pyplot as plt\n","import matplotlib.ticker as ticker\n","\n","plt.figure()\n","plt.plot(all_losses)"]},{"cell_type":"markdown","metadata":{"id":"f2zDR5Zh-E38"},"source":["## 결과평가"]},{"cell_type":"markdown","metadata":{"id":"x8gIZFGL-E38"},"source":["네트워크가 다른 카테고리에서 얼마나 잘 작동하는지 보기위해 모든 실제 언어가 네트워크에서 어떤 언어로 추측되는지를 나타내는 confusion matrix를 만든다. \n","이를 계산하기 위해 evaluate()로 많은 수의 샘플을 네트워크에 실행한다. evaluate()는 train()과 역전파를 뺴면 동일하다."]},{"cell_type":"code","execution_count":15,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":320},"id":"SxHtUfjj-E39","executionInfo":{"status":"ok","timestamp":1645598012651,"user_tz":-540,"elapsed":7229,"user":{"displayName":"Cho Sanghyeon","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03618492692203589805"}},"outputId":"bd1a94ac-1bd8-42c4-a4bf-f8cd2cec8bc9"},"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"needs_background":"light"}}],"source":["confusion = torch.zeros(n_categories, n_categories)\n","n_confusion = 10000\n","\n","def evaluate(line_tensor):\n","    hidden = rnn.initHidden()\n","    \n","    for i in range(line_tensor.size()[0]):\n","        output, hidden = rnn(line_tensor[i], hidden)\n","        \n","    return output\n","\n","# 예시들 중에 어떤것이 정확하게 예측되었는지 기록\n","for i in range(n_confusion):\n","    category, line, category_tensor, line_tensor = randomTrainingExample()\n","    output = evaluate(line_tensor)\n","    guess, guess_i = categoryFromOutput(output)\n","    category_i = all_categories.index(category)\n","    confusion[category_i][guess_i] += 1\n","    \n","# 모든 행을 합계로 나누어 정규화\n","for i in range(n_categories):\n","    confusion[i] = confusion[i] / confusion[i].sum()\n","    \n","# 도식 설정\n","fig = plt.figure()\n","ax = fig.add_subplot(111)\n","cax = ax.matshow(confusion.numpy())\n","fig.colorbar(cax)\n","\n","# 축 설정 \n","ax.set_xticklabels([''] + all_categories, rotation=90)\n","ax.set_yticklabels([''] + all_categories)\n","\n","# 모든 tick에서 레이블 지정 \n","ax.xaxis.set_major_locator(ticker.MultipleLocator(1))\n","ax.yaxis.set_major_locator(ticker.MultipleLocator(1))\n","\n","plt.show()    "]},{"cell_type":"markdown","source":["### 사용자 입력으로 실행"],"metadata":{"id":"gs44PrvZP4Tt"}},{"cell_type":"code","source":["def predict(input_line, n_predictions=3):\n","    print('\\n>%s' % input_line)\n","    with torch.no_grad():\n","        output = evaluate(lineToTensor(input_line))\n","\n","        # get top N categories\n","        topv, topi = output.topk(n_predictions, 1, True)\n","        predictions = []\n","\n","        for i in range(n_predictions):\n","            value = topv[0][i].item()\n","            category_index = topi[0][i].item()\n","            print('(%.2f) %s' % (value, all_categories[category_index]))\n","            predictions.append([value, all_categories[category_index]])\n","\n","predict('Dovesky')\n","predict('Jackson')\n","predict('Satoshi')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3JzancQvFLtc","executionInfo":{"status":"ok","timestamp":1645598012652,"user_tz":-540,"elapsed":15,"user":{"displayName":"Cho Sanghyeon","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03618492692203589805"}},"outputId":"2522316e-7120-4d0d-ff2d-1f28b8db3822"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["\n",">Dovesky\n","(-0.22) Russian\n","(-2.05) Czech\n","(-3.56) Polish\n","\n",">Jackson\n","(-0.75) Scottish\n","(-1.70) Russian\n","(-2.03) Greek\n","\n",">Satoshi\n","(-1.02) Italian\n","(-2.04) Japanese\n","(-2.40) Polish\n"]}]},{"cell_type":"code","source":[""],"metadata":{"id":"wmZxo8RpRat-","executionInfo":{"status":"ok","timestamp":1645598012653,"user_tz":-540,"elapsed":13,"user":{"displayName":"Cho Sanghyeon","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03618492692203589805"}}},"execution_count":16,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"},"colab":{"name":"Character Level RNN .ipynb의 사본","provenance":[{"file_id":"1anVi2PTzmJLqmwvf33xIsZdaqxmvNz15","timestamp":1645598104071}]},"accelerator":"GPU"},"nbformat":4,"nbformat_minor":0}